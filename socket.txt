the steps for creating  a webserver are :
1/ Implementing TCP: First we need to implement the Transport Layer of HTTP which is TCP.
[
    {
        To implement TCP, we have to learn TCP socket programming.
        What is socket?
        A socket is the mechanism that an operating system provides to give programs access to the network.
        It allows messages to be sent and received between applications  on different networked machines.
        ***************
        steps for Programming with TCP/IP sockets:
            1. Create the socket
            2. Identify the socket
            3. On the server, wait for an incoming connection
            4. Send and receive messages
            5. Close the socket
    }
    Step 1. Create a socket 
    {
        with [int    socket(domain, type, protocol)] function
    }
    Step 2. Indentify (name) a socket.
    {
        When we talk about naming a socket, we are talking about assigning a transport address to the socket (a port number in IP networking).
        In sockets, this operation is called binding an address and the bind system call is used for this.
        [int    bind(int socket, const struct sockaddr *address, socklen_t address_len)]
        Before calling bind, we need to fill out this structure
    }
    Step 3. On the server, wait for an incoming connection
    {
        - Before a client can connect to a server, the server should have a socket that is prepared to accept the connections.
            The listen system call tells a socket that it should be capable of accepting incoming connections:
            with the function [int listen(int socket, int backlog)]
            backlog defines the maximum number of pending connections.
        - The accept system call grabs the first connection request and creates a new socket for that connection.
            by the function [int accept(int socket, struct sockaddr *restrict address, socklen_t *restrict address_len);]   
    }
    Step 4. Send and receive messages
    {
        now We have connected sockets between a client(a web browser) and a server!
        for Communication. The same read and write functions that work on files also work on sockets.
    }
    Step 5. Close the socket
    {
        close(socket);
    }
    our TCP implementation is done. TCP socket client-side + TCP socket server-side
]
*************************************************************
2/ HTTP server implementation.
